{"version":3,"sources":["constants.js","Square.jsx","Board.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["X_TEXT","Constants","O_TEXT","Square","props","className","value","onClick","EMPTY_TEXT","Board","state","squares","Array","fill","xIsNext","isGameOver","winner","this","setState","i","slice","getXO","calculateWinner","win","handleClick","lines","length","a","b","c","status","Fragment","renderSquare","Status","restart","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e295e89.chunk.js","sourcesContent":["export default {\r\n\tEMPTY_TEXT: '',\r\n\tX_TEXT: 'X',\r\n\tO_TEXT: 'O'\r\n}\r\n\r\n","import React from 'react';\nimport './Square.css';\nimport Constants from './constants';\n\nconst { X_TEXT, O_TEXT } = Constants;\n\nfunction getClassName(value) {\n  if (value === X_TEXT) {\n    return \"square square-x\";\n  } else if (value === O_TEXT) {\n    return \"square square-o\";\n  }\n  return \"square\";\n}\n\nfunction Square(props) {\n  return (\n    <div className={getClassName(props.value)} onClick={props.onClick} >\n      {props.value}\n    </div>\n  );\n}\n\nexport default Square;\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport Constants from './constants';\n\nconst { EMPTY_TEXT, X_TEXT, O_TEXT } = Constants;\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(EMPTY_TEXT),\n      xIsNext: true,\n      isGameOver: false,\n      winner: null\n    }\n  }\n\n  restart() {\n    this.setState({\n      squares: Array(9).fill(EMPTY_TEXT),\n      xIsNext: true,\n      isGameOver: false,\n      winner: null\n    });\n  }\n\n  getXO() {\n    return this.state.xIsNext ? X_TEXT : O_TEXT;\n  }\n\n  handleClick(i) {\n    if (this.state.isGameOver) return;\n\n    const squares = this.state.squares.slice();\n    if (squares[i] !== EMPTY_TEXT) return;\n\n    squares[i] = this.getXO();\n    this.setState({ squares: squares, xIsNext: !this.state.xIsNext });\n\n    const winner = this.calculateWinner(squares);\n    if (winner !== null) {\n      this.win(winner);\n    }\n  }\n\n  renderSquare(i) {\n    return <Square\n      value={this.state.squares[i]}\n      onClick={() => this.handleClick(i)} />;\n  }\n\n  calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] !== EMPTY_TEXT && squares[a] === squares[b] && squares[b] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n  win(winner) {\n    this.setState({ isGameOver: true, winner: winner });\n  }\n\n  render() {\n    const status = this.getXO();\n    const winner = this.state.winner;\n\n    return (\n      <React.Fragment>\n        <div className=\"board-container\">\n          <div className=\"board\">\n            <div className=\"board-row\">\n              {this.renderSquare(0)}\n              {this.renderSquare(1)}\n              {this.renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n              {this.renderSquare(3)}\n              {this.renderSquare(4)}\n              {this.renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n              {this.renderSquare(6)}\n              {this.renderSquare(7)}\n              {this.renderSquare(8)}\n            </div>\n          </div>\n\n        </div>\n        <div className=\"controller\">\n          <this.Status status={status} winner={winner} />\n          <button className=\"restart\" onClick={() => this.restart()}>RESTART</button>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  Status(props) {\n    if (props.winner) {\n      return (\n        <div className=\"status\">\n          Winner: {props.winner}\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"status\">\n        Next player: {props.status}\n      </div>\n    )\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}